DELIMITER //
CREATE PROCEDURE `CLIENTE_NOVO_VELHO` (CPF VARCHAR(20))
BEGIN
	DECLARE RESULTADO VARCHAR(20);
    DECLARE DT_NASCIMENTO DATE;
    SELECT DATA_DE_NASCIMENTO INTO DT_NASCIMENTO FROM TABELA_DE_CLIENTES WHERE CPF = CPF;
    IF DT_NASCIMENTO < '2000-01-01' THEN
		SET RESULTADO = 'CLIENTE VELHO';
    ELSE
		SET RESULTADO = 'CLIENTE NOVO';
    END IF;
    SELECT RESULTADO;
END//

CALL CLIENTE_NOVO_VELHO('1471156710');

-- IF Aninhado
DELIMITER //
DROP PROCEDURE IF EXISTS IF_ANINHADO;
CREATE PROCEDURE `IF_ANINHADO` (CODIGO VARCHAR(20))
BEGIN
	DECLARE PRECO FLOAT;
    DECLARE RESULTADO VARCHAR(30);
    SELECT PRECO_DE_LISTA INTO PRECO FROM TABELA_DE_PRODUTOS WHERE CODIGO_DO_PRODUTO = CODIGO LIMIT 1;
    IF PRECO >= 12 THEN
		SET RESULTADO = 'ESSE É UM PRODUTO CARO';
	ELSEIF PRECO >= 7 AND PRECO < 12 THEN
		SET RESULTADO = 'ESSE É UM PRODUTO EM CONTA';
	ELSE
		SET RESULTADO = 'ESSE É UM PRODUTO BARATO';
	END IF;
    SELECT RESULTADO;
END//

CALL IF_ANINHADO('1037797');

-- mesmo exemplo de cima usando o CASE
DELIMITER //
DROP PROCEDURE IF EXISTS IF_ANINHADO_CASE;
CREATE PROCEDURE IF_ANINHADO_CASE (CODIGO VARCHAR(20))
BEGIN
	DECLARE PRECO FLOAT;
    DECLARE RESULTADO VARCHAR(30);
    SELECT PRECO_DE_LISTA INTO PRECO FROM TABELA_DE_PRODUTOS WHERE CODIGO_DO_PRODUTO = CODIGO LIMIT 1;
    CASE
		WHEN PRECO >= 12 THEN SET RESULTADO = 'PRODUTO CARO';
        WHEN PRECO >= 7 AND PRECO < 12 THEN SET RESULTADO = 'PRODUTO EM CONTA';
        WHEN PRECO < 7 THEN SET RESULTADO = 'PRODUTO BARATO';
    END CASE;
    SELECT RESULTADO;
END//

CALL IF_ANINHADO_CASE('1000889');

-- controle de fluxo usando o CASE
DELIMITER //
DROP PROCEDURE IF EXISTS TIPO_SABOR;
CREATE PROCEDURE `TIPO_SABOR` (CODIGO VARCHAR(20))
BEGIN
	DECLARE vSABOR VARCHAR(10);
    SELECT SABOR INTO vSABOR FROM TABELA_DE_PRODUTOS WHERE CODIGO_DO_PRODUTO = CODIGO;
    CASE vSABOR
		WHEN 'Laranja' THEN SELECT 'Cítrico';
        WHEN 'Lima/Limão' THEN SELECT 'Cítrico';
        WHEN 'Morango/Limão' THEN SELECT 'Cítrico';
		WHEN 'Uva' THEN SELECT 'Neutro';
        WHEN 'Morango' THEN SELECT 'Neutro';
        
        ELSE
			SELECT 'Ácido';
    END CASE;
END//

CALL TIPO_SABOR('1000889');
SELECT DISTINCT CODIGO_DO_PRODUTO, SABOR FROM TABELA_DE_PRODUTOS;

-- tratamento de erro 1339
DELIMITER //
DROP PROCEDURE IF EXISTS TIPO_SABOR_ERRO;
CREATE PROCEDURE `TIPO_SABOR_ERRO` (CODIGO VARCHAR(20))
BEGIN
	DECLARE SABOR VARCHAR(10);
    DECLARE msgErro VARCHAR(30);
    DECLARE CONTINUE HANDLER FOR 1339 SET msgErro = 'O case não está completo!';
    SELECT SABOR INTO SABOR FROM TABELA_DE_PRODUTOS WHERE CODIGO_DO_PRODUTO = CODIGO;
    CASE SABOR
		WHEN 'Laranja' THEN SELECT 'Cítrico';
        WHEN 'Lima/Limão' THEN SELECT 'Cítrico';
        WHEN 'Morango/Limão' THEN SELECT 'Cítrico';
		WHEN 'Uva' THEN SELECT 'Neutro';
        WHEN 'Morango' THEN SELECT 'Neutro';
    END CASE;
    SELECT msgErro;
END//

CALL TIPO_SABOR_ERRO('1004327');

-- looping WHILE
CREATE TABLE TAB_LOOPING(ID INT);

DELIMITER //
CREATE PROCEDURE `LOOPING_WHILE` (NUM_INICIAL TINYINT, NUM_FINAL TINYINT)
BEGIN
	DECLARE CONTADOR TINYINT;
    DELETE FROM TAB_LOOPING;
    
    SET CONTADOR = NUM_INICIAL;
    
    WHILE CONTADOR <= NUM_FINAL
    DO 
		INSERT INTO TAB_LOOPING (ID) VALUES (CONTADOR);
        SET CONTADOR = CONTADOR + 1;
	END WHILE;
    SELECT * FROM TAB_LOOPING;
END//

CALL LOOPING_WHILE(1, 10);

-- EXERCÍCIOS

-- mostrar a soma do número de notas em um determinado intervalo de datas
DELIMITER //
DROP PROCEDURE IF EXISTS SOMA_DIAS_NOTAS;
CREATE PROCEDURE `SOMA_DIAS_NOTAS` (DATA_INICIAL DATE, DATA_FINAL DATE)
BEGIN
	DECLARE NUMERO_NOTAS INT;
    
    WHILE DATA_INICIAL <= DATA_FINAL
    DO
		SELECT COUNT(*) INTO NUMERO_NOTAS FROM NOTAS_FISCAIS WHERE DATA_VENDA = DATA_INICIAL;
        SELECT ADDDATE(DATA_INICIAL, INTERVAL 1 DAY) INTO DATA_INICIAL;
	END WHILE;
    SELECT NUMERO_NOTAS;
END//

CALL SOMA_DIAS_NOTAS('2016-01-01', '2016-01-10');

DELIMITER //
CREATE PROCEDURE `TESTA_NUMERO_NOTAS` (CPF VARCHAR(11))
BEGIN
	DECLARE RESULTADO VARCHAR(20);
	DECLARE QTDE_NOTAS INT;
    SELECT COUNT(*) CPF INTO QTDE_NOTAS FROM NOTAS_FISCAIS WHERE CPF = CPF;
    IF QTDE_NOTAS > 70 THEN
		SET RESULTADO = 'MUITA NOTA';
	ELSE
		SET RESULTADO = 'POUCA NOTA';
	END IF;
	SELECT RESULTADO;
END//

CALL TESTA_NUMERO_NOTAS('9283760794');

-- mesmo exercício de cima mas agora usando o CASE
DELIMITER //
CREATE PROCEDURE `TESTA_NUMERO_NOTAS_CASE` (CPF VARCHAR(12))
BEGIN
	DECLARE RESULTADO VARCHAR(20);
    DECLARE QTDE_NOTAS INT;
    SELECT COUNT(*) CPF INTO QTDE_NOTAS FROM NOTAS_FISCAIS WHERE CPF = CPF;
    CASE
		WHEN QTDE_NOTAS > 7 THEN SET RESULTADO = 'MUITA NOTA';
        WHEN QTDE_NOTAS <= 7 THEN SET RESULTADO = 'POUCA NOTA';
    END CASE;
    SELECT RESULTADO;
END//

CALL TESTA_NUMERO_NOTAS_CASE('9283760794');

-- comparação de vendas em duas datas
DELIMITER //
CREATE PROCEDURE `Comparativo_Vendas`(DataInicial DATE, DataFinal DATE)
BEGIN
	DECLARE FaturamentoInicial FLOAT;
	DECLARE FaturamentoFinal FLOAT;
	DECLARE Variacao float;
    
	SELECT SUM(B.QUANTIDADE * B.PRECO) INTO FaturamentoInicial FROM 
	NOTAS_FISCAIS A INNER JOIN ITENS_NOTAS_FISCAIS B
	ON A.NUMERO = B.NUMERO
	WHERE A.DATA_VENDA = DataInicial;
	SELECT SUM(B.QUANTIDADE * B.PRECO) INTO FaturamentoFinal FROM 
	NOTAS_FISCAIS A INNER JOIN ITENS_NOTAS_FISCAIS B
	ON A.NUMERO = B.NUMERO
	WHERE A.DATA_VENDA = DataFinal ;
	SET Variacao = ((FaturamentoFinal / FaturamentoInicial) -1) * 100;
    
	IF Variacao > 10 THEN
		SELECT 'Verde';
	ELSEIF Variacao >= -10 AND Variacao <= 10 THEN
		SELECT 'Amarelo';
	ELSE
		SELECT 'Vermelho';
	END IF;   
END//