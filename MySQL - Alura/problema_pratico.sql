/*
	Fórmula para pegar um número aleatório entre um número mínimo e um máximo
    (RAND() * (MAX - MIN + 1) + MIN)
*/
-- A função floor é usada para retornar somente a parte inteira de um número
SELECT FLOOR(RAND() * (300 - 15 + 1) + 15) AS NÚMERO_ALEATÓRIO;

-- CRIANDO A FUNÇÃO QUE RETORNA UM NÚMERO ALEATÓRIO
DELIMITER //
CREATE FUNCTION `F_NUMERO_ALEATORIO` (MIN INT, MAX INT)
RETURNS INT
BEGIN
	DECLARE vRETORNO INT;
    SELECT FLOOR(RAND() * (MAX - MIN + 1) + MIN) INTO vRETORNO;
    
    RETURN vRETORNO;
END//

SELECT F_NUMERO_ALEATORIO(1, 10) AS NUMERO_ALEATÓRIO;

-- CRIANDO A FUNÇÃO QUE RETORNA UM CLIENTE ALEATÓRIO
DELIMITER //
CREATE FUNCTION `F_CLIENTE_ALEATORIO` ()
RETURNS VARCHAR(11)
BEGIN
	DECLARE vRETORNO VARCHAR(11);
    DECLARE NUM_MAX_CLIENTES INT;
    DECLARE NUM_ALEATORIO INT;
    
    SELECT COUNT(*) INTO NUM_MAX_CLIENTES FROM TABELA_DE_CLIENTES;
    
    SET NUM_ALEATORIO = F_NUMERO_ALEATORIO(1, NUM_MAX_CLIENTES);
    SET NUM_ALEATORIO = NUM_ALEATORIO - 1;
    
    SELECT CPF INTO vRETORNO FROM TABELA_DE_CLIENTES LIMIT NUM_ALEATORIO, 1;
    
    RETURN vRETORNO;
END//

SELECT F_CLIENTE_ALEATORIO() AS CLIENTE_ALEATÓRIO;

-- CRIANDO A FUNÇÃO QUE RETORNA UM PRODUTO ALEATÓRIO
DELIMITER //
DROP FUNCTION IF EXISTS F_PRODUTO_ALEATORIO;
CREATE FUNCTION `F_PRODUTO_ALEATORIO` ()
RETURNS VARCHAR(10)
BEGIN
	DECLARE vRETORNO VARCHAR(10);
    DECLARE NUM_MAX_PRODUTOS INT;
    DECLARE NUM_ALEATORIO INT;
    
    SELECT COUNT(*) INTO NUM_MAX_PRODUTOS FROM TABELA_DE_PRODUTOS;
    
    SET NUM_ALEATORIO = F_NUMERO_ALEATORIO(1, NUM_MAX_PRODUTOS);
    SET NUM_ALEATORIO  = NUM_ALEATORIO - 1;
    
    SELECT CODIGO_DO_PRODUTO INTO vRETORNO FROM TABELA_DE_PRODUTOS LIMIT NUM_ALEATORIO, 1;
    
    RETURN vRETORNO;
END//

SELECT F_PRODUTO_ALEATORIO() AS PRODUTO_ALEATÓRIO;

-- CRIANDO A FUNÇÃO QUE RETORNA UM VENDEDOR ALEATÓRIO
DELIMITER //
DROP FUNCTION IF EXISTS F_VENDEDOR_ALEATORIO;
CREATE FUNCTION `F_VENDEDOR_ALEATORIO` ()
RETURNS VARCHAR(5) 
BEGIN
	DECLARE vRETORNO VARCHAR(5);
    DECLARE NUM_MAX_VENDEDORES INT;
    DECLARE NUM_ALEATORIO INT;
    
    SELECT COUNT(*) INTO NUM_MAX_VENDEDORES FROM TABELA_DE_VENDEDORES;
    
    SET NUM_ALEATORIO = F_NUMERO_ALEATORIO(1, NUM_MAX_VENDEDORES);
    SET NUM_ALEATORIO = NUM_ALEATORIO - 1;
    
    SELECT MATRICULA INTO vRETORNO FROM TABELA_DE_VENDEDORES LIMIT NUM_ALEATORIO, 1;
    
    RETURN vRETORNO;
END//

SELECT F_VENDEDOR_ALEATORIO() AS NOME_VENDEDOR;

-- PROCEDURE PARA INSERIR A VENDA
DELIMITER //
DROP PROCEDURE IF EXISTS P_INSERE_VENDA; //
CREATE PROCEDURE `P_INSERE_VENDA` (vDATA DATE, MAX_ITENS INT, MAX_QTDE INT)
BEGIN
	DECLARE vCLIENTE VARCHAR(11);
    DECLARE vPRODUTO VARCHAR(10);
    DECLARE vVENDEDOR VARCHAR(5);
    DECLARE vQTDE INT;
    DECLARE vPRECO FLOAT;
    DECLARE vITENS INT;
    DECLARE vNUMERO_NOTA INT;
    DECLARE vCONTADOR INT DEFAULT 1;
    DECLARE vNUM_ITENS_NOTA INT;
    
    SELECT MAX(NUMERO) + 1 INTO vNUMERO_NOTA FROM NOTAS_FISCAIS;
    
    SET vCLIENTE = F_CLIENTE_ALEATORIO();
    SET vPRODUTO = F_PRODUTO_ALEATORIO();
    SET vVENDEDOR = F_VENDEDOR_ALEATORIO();
    
    INSERT INTO NOTAS_FISCAIS (CPF, MATRICULA, DATA_VENDA, NUMERO, IMPOSTO)
    VALUES
    (vCLIENTE, vVENDEDOR, vDATA, vNUMERO_NOTA, 0.18);
    
    SET vITENS = F_NUMERO_ALEATORIO(1, MAX_QTDE);
    
    WHILE vCONTADOR <= vITENS
    DO
		SET vPRODUTO = F_PRODUTO_ALEATORIO();
        
        SELECT COUNT(*) INTO vNUM_ITENS_NOTA FROM ITENS_NOTAS_FISCAIS WHERE NUMERO = vNUMERO_NOTA AND CODIGO_DO_PRODUTO = vPRODUTO;
        
        IF vNUM_ITENS_NOTA = 0 THEN
			SET vQTDE = F_NUMERO_ALEATORIO(10, MAX_QTDE);
			SELECT PRECO_DE_LISTA INTO vPRECO FROM TABELA_DE_PRODUTOS
			WHERE CODIGO_DO_PRODUTO = vPRODUTO;
			INSERT INTO ITENS_NOTAS_FISCAIS (NUMERO, CODIGO_DO_PRODUTO, QUANTIDADE, PRECO)
			VALUES
			(vNUMERO_NOTA, vPRODUTO, vQTDE, vPRECO);
		END IF;
        
        SET vCONTADOR = vCONTADOR + 1;
	END WHILE;
    
END//

CALL P_INSERE_VENDA('20230310', 3, 100);

SELECT * FROM NOTAS_FISCAIS WHERE DATA_VENDA = '2023-03-10';

/*
	Crie uma tabela chamada TABELA_ALEATORIOS
    Faça uma Stored Procedure chamada TABELA_NUMEROS que use um loop para gravar
    nesta tabela 100 números aleatórios entre 0 e 1000.
    Depois liste numa consulta esta tabela
*/
CREATE TABLE TABELA_ALEATORIOS(NUMERO INT);

DELIMITER //
DROP PROCEDURE IF EXISTS TABELA_NUMEROS;
CREATE PROCEDURE `TABELA_NUMEROS` (MIN INT, MAX INT)
BEGIN
	DECLARE CONTADOR INT;
    DECLARE vNUMERO INT;
    DELETE FROM TABELA_ALEATORIOS;
    
    SET CONTADOR = MIN;
    
    WHILE CONTADOR <= 100
    DO
		SELECT FLOOR(RAND() * (MAX - MIN + 1) + MIN) INTO vNUMERO;
		INSERT INTO TABELA_ALEATORIOS (NUMERO)
        VALUES
        (vNUMERO);
        SET CONTADOR = CONTADOR + 1;
	END WHILE;
    SELECT * FROM TABELA_ALEATORIOS;
END//

CALL TABELA_NUMEROS(0, 1000);

-- MELHORANDO TRIGGERS
CREATE TABLE TAB_FATURAMENTO(
	DATA_VENDA DATE NULL,
    TOTAL_VENDA FLOAT
);

-- Agora só é necessário colocar a chamada da PROCEDURE dentro das 3 TRIGGERS
DELIMITER //
DROP TRIGGER IF EXISTS TG_CALCULA_FATURAMENTO_INSERT;
CREATE TRIGGER TG_CALCULA_FATURAMENTO_INSERT AFTER INSERT ON ITENS_NOTAS_FISCAIS
FOR EACH ROW BEGIN
  CALL P_CALCULA_FATURAMENTO;
END//

DELIMITER //
DROP TRIGGER IF EXISTS TG_CALCULA_FATURAMENTO_UPDATE;
CREATE TRIGGER TG_CALCULA_FATURAMENTO_UPDATE AFTER UPDATE ON ITENS_NOTAS_FISCAIS
FOR EACH ROW BEGIN
  CALL P_CALCULA_FATURAMENTO;
END//

DELIMITER //
DROP TRIGGER TG_CALCULA_FATURAMENTO_DELETE;
CREATE TRIGGER TG_CALCULA_FATURAMENTO_DELETE AFTER DELETE ON ITENS_NOTAS_FISCAIS
FOR EACH ROW BEGIN
  CALL P_CALCULA_FATURAMENTO;
END//

-- PROCEDURE com o código que estava sendo repetido nas 3 TRIGGERS
DELIMITER //
CREATE PROCEDURE `P_CALCULA_FATURAMENTO` ()
BEGIN
	DELETE FROM TAB_FATURAMENTO;
    
	INSERT INTO TAB_FATURAMENTO
	SELECT A.DATA_VENDA, SUM(B.QUANTIDADE * B.PRECO) AS TOTAL_VENDA FROM
	NOTAS_FISCAIS A INNER JOIN ITENS_NOTAS_FISCAIS B
	ON A.NUMERO = B.NUMERO
	GROUP BY A.DATA_VENDA;
END//

CALL P_INSERE_VENDA('20230312', 5, 50);

SELECT * FROM TAB_FATURAMENTO WHERE DATA_VENDA = '2023-03-11';